#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <float.h>
#include <math.h>

// Estructura para representar un punto
typedef struct {
    double x, y;
} Punto;

// Genera un número aleatorio entre -100 y 100
double random_double() {
    return ((double)rand() / RAND_MAX) * 200.0 - 100.0;
}

// Calcula la distancia euclidiana entre dos puntos
double distancia(Punto p1, Punto p2) {
    return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}

// Encuentra el par de puntos más cercano
void encontrarParMasCercano(Punto *puntos, int n, Punto *p1_cercano, Punto *p2_cercano, double *distancia_minima) {
    *distancia_minima = DBL_MAX;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            double dist = distancia(puntos[i], puntos[j]);
            if (dist < *distancia_minima) {
                *distancia_minima = dist;
                *p1_cercano = puntos[i];
                *p2_cercano = puntos[j];
            }
        }
    }
}

int main() {
    int tamanios[] = {10, 100, 1000, 10000, 100000};
    int num_casos = sizeof(tamanios) / sizeof(tamanios[0]);

    for (int caso = 0; caso < num_casos; caso++) {
        int n = tamanios[caso];
        Punto *puntos = (Punto *)malloc(n * sizeof(Punto));

        if (!puntos) {
            printf("Error al asignar memoria\n");
            return 1;
        }

        // Semilla para números aleatorios
        srand(time(NULL));

        // Generar puntos aleatorios
        for (int i = 0; i < n; i++) {
            puntos[i].x = random_double();
            puntos[i].y = random_double();
        }

        // Medir tiempo de ejecución
        clock_t inicio = clock();

        // Encontrar el par más cercano
        Punto p1_cercano, p2_cercano;
        double distancia_minima;
        encontrarParMasCercano(puntos, n, &p1_cercano, &p2_cercano, &distancia_minima);

        clock_t fin = clock();

        // Calcular tiempo transcurrido
        double tiempo_ejecucion = (double)(fin - inicio) / CLOCKS_PER_SEC;

        // Imprimir resultados
        printf("n = %d\n", n);
        printf("Par más cercano: (%.2f, %.2f) y (%.2f, %.2f)\n", p1_cercano.x, p1_cercano.y, p2_cercano.x, p2_cercano.y);
        printf("Distancia mínima: %.6f\n", distancia_minima);
        printf("Tiempo de ejecución: %.6f segundos\n\n", tiempo_ejecucion);

        free(puntos);
    }

    return 0;
}
